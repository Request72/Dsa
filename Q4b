class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def largest_bst_sum(root):
    def dfs(node):
        if not node:
            return (True, 0, float('inf'), float('-inf'))
        
        left_is_bst, left_sum, left_min, left_max = dfs(node.left)
        right_is_bst, right_sum, right_min, right_max = dfs(node.right)
        
        if left_is_bst and right_is_bst and left_max < node.val < right_min:
            total_sum = left_sum + right_sum + node.val
            return (True, total_sum, min(node.val, left_min), max(node.val, right_max))
        else:
            return (False, 0, float('-inf'), float('inf'))
    
    is_bst, max_sum, _, _ = dfs(root)
    return max_sum

root = TreeNode(1)
root.left = TreeNode(4)
root.right = TreeNode(3)
root.left.left = TreeNode(2)
root.left.right = TreeNode(4)
root.right.left = TreeNode(2)
root.right.right = TreeNode(5)
root.right.right.right = TreeNode(4)
root.right.right.right.right = TreeNode(6)

print(largest_bst_sum(root))  

